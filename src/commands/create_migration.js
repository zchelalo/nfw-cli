import { program } from 'commander'
import fs from 'fs/promises'
import path from 'path'
import plural from 'pluralize-es'
import { crearArchivo } from '../utils/index.js'

program.command('create:migration')
.description('crea una migración de flyway según el nombre dado')
.argument('<nombreMigracion>', 'nombre de la migración a crear')
.action(async (nombreMigracion) => {
  try {
    await crearMigracion(nombreMigracion)
  } catch (error) {
    console.error('Error: ', error)
    return
  }
})

async function crearMigracion(nombreMigracion){
  const rutaMigraciones = path.join('./src', 'database', 'migrations')
  let versionNuevaMigracion = undefined
  try {
    const ultimaVersion = await obtenerUltimaVersionMigraciones(rutaMigraciones)
    versionNuevaMigracion = ultimaVersion !== null ? parseInt(ultimaVersion) + 1 : 1
  } catch (error) {
    console.error(error)
    return
  }
  
  const nombreNuevaMigracion = `V${versionNuevaMigracion}__${nombreMigracion}.sql`
  const migracionArchivo = 
`CREATE TABLE "${plural(nombreMigracion)}" (
  "id" INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  "nombre" varchar(255) NOT NULL,
  "created_at" timestamp NOT NULL DEFAULT (CURRENT_TIMESTAMP),
  "updated_at" timestamp NOT NULL DEFAULT (CURRENT_TIMESTAMP)
);`
  try {
    await crearArchivo(path.join(rutaMigraciones, nombreNuevaMigracion), migracionArchivo)
  } catch (error) {
    console.error('Error:', error.message)
    return
  }
}

async function obtenerUltimaVersionMigraciones(ruta){
  try {
    const archivos = await fs.readdir(ruta)
    const versionMigraciones = archivos
      .filter(archivo => /^V(\d+)__.+\.sql$/.test(archivo))
      .map(archivo => archivo.match(/^V(\d+)__.+\.sql$/)[1])
    const migracionMasReciente = versionMigraciones.length > 0 ? versionMigraciones.sort((a, b) => parseInt(b) - parseInt(a))[0] : null
    return migracionMasReciente
  } catch (error) {
    throw error
  }
}

export { program, crearMigracion }